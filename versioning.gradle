/**
 *
 * Auto-magically handles version based on semantic versioning.
 * Version information is stored and read from "versioning.properties".
 *
 * Setup:
 *
 *      1. Configure build.gradle with the following at a minimum:
 *
 *          apply from: 'versioning.gradle'
 *          version = ext.getVersion()
 *
 *      2. Create a file called "version.properties" with the following three lines:
 *
 *          MAJOR=0
 *          MINOR=0
 *          PATCH=5
 *
 * Usage:
 *
 *  $ gradle bump major   (i.e.: 1.0.0 to 2.0.0)
 *  $ gradle bump minor   (i.e.: 1.1.0 to 1.2.0)
 *  $ gradle bump patch   (i.e.: 1.0.1 to 1.0.2)
 *
 */
gradle.allprojects {

    /**
     *
     * Exposes the function bump() to all projects and can be called manually
     * or via the tasks define below.
     *
     * Pass the mode as an agument with one of: MAJOR, MINOR or PATCH.
     *
     */
    ext.bump = { mode ->

        def versionFile = file('version.properties')
        def build = new Properties()

        versionFile.withReader {

            build.load(it)

        }

        build[mode] = (Integer.parseInt(build[mode]) + 1).toString()

        System.out.println 'Bumping to "' + build

        versionFile.withWriter { build.store(it, "This file is now managed by gradle!") }

    }

    /**
     *
     * Returns the version string parsed from "version.properties".
     *
     */
    ext.getVersion = {

        def versionFile = file('version.properties')
        def build = new Properties()

        versionFile.withReader {

            build.load(it)

        }

        return build.MAJOR + '.' + build.MINOR + '.' + build.PATCH

    }

    /**
     *
     * Increases version <major>.minor.patch by one.
     *
     */
    task('bump major') {

        group = 'versioning'

        doLast {

            bump('MAJOR')

        }

    }

    /**
     *
     * Increases version major.<minor>.patch by one.
     *
     */
    task('bump minor') {

        group = 'versioning'

        doLast {

            bump('MINOR')

        }

    }

    /**
     *
     * Increases version major.minor.<patch> by one.
     *
     */
    task('bump patch') {

        group = 'versioning'

        doLast {

            bump('PATCH')

        }

    }

}
